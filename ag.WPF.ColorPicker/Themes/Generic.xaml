<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:picker="clr-namespace:ag.WPF.ColorPicker">

    <picker:ValueToColorConverter x:Key="ValueToColorConverter"/>
    <picker:NullableColorToBrushConverter x:Key="NullableColorToBrushConverter"/>
    <picker:ColorToSolidColorBrushConverter x:Key="ColorToSolidColorBrushConverter"/>
    <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>

    <Geometry x:Key="CopyGeometry">
        M2,6 L12,6 L12,18 L2,18 Z M8,6 L8,2 L18,2 L18,14 L12,14
    </Geometry>
    <DrawingBrush x:Key="TransparentBackgroundBrush" TileMode="Tile" Viewport="0,0,10,10" ViewportUnits="Absolute">
        <DrawingBrush.Drawing>
            <DrawingGroup>
                <GeometryDrawing Brush="White">
                    <GeometryDrawing.Geometry>
                        <RectangleGeometry Rect="0,0,100,100"/>
                    </GeometryDrawing.Geometry>
                </GeometryDrawing>
                <GeometryDrawing Brush="LightGray">
                    <GeometryDrawing.Geometry>
                        <GeometryGroup>
                            <RectangleGeometry Rect="0,0,50,50"/>
                            <RectangleGeometry Rect="50,50,50,50"/>
                        </GeometryGroup>
                    </GeometryDrawing.Geometry>
                </GeometryDrawing>
            </DrawingGroup>
        </DrawingBrush.Drawing>
    </DrawingBrush>
    
    <Style TargetType="{x:Type picker:ColorSlider}">
        <Setter Property="BorderBrush" Value="DarkGray"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="SmallChange" Value="10"/>
        <Setter Property="Orientation" Value="Vertical"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="Minimum" Value="0"/>
        <Setter Property="Maximum" Value="360"/>
        <Setter Property="TickFrequency" Value="0.001"/>
        <Setter Property="IsSnapToTickEnabled" Value="True"/>
        <Setter Property="IsDirectionReversed" Value="False"/>
        <Setter Property="IsMoveToPointEnabled" Value="True"/>
        <Setter Property="Value" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type picker:ColorSlider}">
                    <Grid>
                        <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Margin="0,8,0,0">
                            <Border x:Name="PART_TrackBackground" Width="15">
                                <Rectangle x:Name="PART_SpectrumDisplay" Stretch="Fill" VerticalAlignment="Stretch"/>
                            </Border>
                        </Border>
                        <Track x:Name="PART_Track">
                            <Track.DecreaseRepeatButton>
                                <RepeatButton Command="Slider.DecreaseLarge">
                                    <RepeatButton.Style>
                                        <Style TargetType="{x:Type RepeatButton}">
                                            <Setter Property="OverridesDefaultStyle" Value="True"/>
                                            <Setter Property="IsTabStop" Value="False"/>
                                            <Setter Property="Focusable" Value="False"/>
                                            <Setter Property="Background" Value="Transparent"/>
                                            <Setter Property="Template">
                                                <Setter.Value>
                                                    <ControlTemplate TargetType="{x:Type RepeatButton}">
                                                        <Border Background="{TemplateBinding Background}"/>
                                                    </ControlTemplate>
                                                </Setter.Value>
                                            </Setter>
                                        </Style>
                                    </RepeatButton.Style>
                                </RepeatButton>
                            </Track.DecreaseRepeatButton>
                            <Track.IncreaseRepeatButton>
                                <RepeatButton Command="Slider.IncreaseLarge">
                                    <RepeatButton.Style>
                                        <Style TargetType="{x:Type RepeatButton}">
                                            <Setter Property="OverridesDefaultStyle" Value="True"/>
                                            <Setter Property="IsTabStop" Value="False"/>
                                            <Setter Property="Focusable" Value="False"/>
                                            <Setter Property="Background" Value="Transparent"/>
                                            <Setter Property="Template">
                                                <Setter.Value>
                                                    <ControlTemplate TargetType="{x:Type RepeatButton}">
                                                        <Border Background="{TemplateBinding Background}"/>
                                                    </ControlTemplate>
                                                </Setter.Value>
                                            </Setter>
                                        </Style>
                                    </RepeatButton.Style>
                                </RepeatButton>
                            </Track.IncreaseRepeatButton>
                            <Track.Thumb>
                                <Thumb>
                                    <Thumb.Style>
                                        <Style TargetType="{x:Type Thumb}">
                                            <Setter Property="Focusable" Value="False"/>
                                            <Setter Property="OverridesDefaultStyle" Value="True"/>
                                            <Setter Property="Height" Value="12"/>
                                            <Setter Property="Width" Value="15"/>
                                            <Setter Property="Foreground" Value="Gray"/>
                                            <Setter Property="Template">
                                                <Setter.Value>
                                                    <ControlTemplate TargetType="{x:Type Thumb}">
                                                        <Canvas Background="Transparent" SnapsToDevicePixels="True">
                                                            <Path x:Name="LeftArrow" Data="F1M276.761,316L262.619,307.835 262.619,324.165 276.761,316z" Fill="Black" Height="8" RenderTransformOrigin="0.5,0.5" Stretch="Fill" Stroke="Black" StrokeLineJoin="Round" Width="6">
                                                                <Path.RenderTransform>
                                                                    <TransformGroup>
                                                                        <TranslateTransform Y="6"/>
                                                                    </TransformGroup>
                                                                </Path.RenderTransform>
                                                            </Path>
                                                            <Path x:Name="RightArrow" Data="F1M276.761,316L262.619,307.835 262.619,324.165 276.761,316z" Fill="Black" Height="8" RenderTransformOrigin="0.5,0.5" Stretch="Fill" Stroke="Black" StrokeLineJoin="Round" Width="6">
                                                                <Path.RenderTransform>
                                                                    <TransformGroup>
                                                                        <RotateTransform Angle="-180"/>
                                                                        <TranslateTransform X="9" Y="6"/>
                                                                    </TransformGroup>
                                                                </Path.RenderTransform>
                                                            </Path>
                                                        </Canvas>
                                                    </ControlTemplate>
                                                </Setter.Value>
                                            </Setter>
                                        </Style>
                                    </Thumb.Style>
                                </Thumb>
                            </Track.Thumb>
                        </Track>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type picker:ColorPanel}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type picker:ColorPanel}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition/>
                            <ColumnDefinition Width="auto"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition/>
                            <RowDefinition Height="auto"/>
                            <RowDefinition Height="auto"/>
                            <RowDefinition Height="auto"/>
                            <RowDefinition Height="auto"/>
                        </Grid.RowDefinitions>
                        <Border x:Name="borderCanvas" BorderBrush="DarkGray" BorderThickness="1" ClipToBounds="True" Background="{StaticResource TransparentBackgroundBrush}">
                            <Canvas x:Name="PART_ColorShadingCanvas" Height="{Binding ActualHeight, ElementName=borderCanvas}" Width="{Binding ActualWidth, ElementName=borderCanvas}">
                                <Rectangle x:Name="ColorShadingRectangle" Height="{Binding ActualHeight, ElementName=PART_ColorShadingCanvas}" Width="{Binding ActualWidth, ElementName=PART_ColorShadingCanvas}">
                                    <Rectangle.Fill>
                                        <SolidColorBrush Color="{Binding ElementName=PART_SpectrumSlider, Path=SelectedColor}"/>
                                    </Rectangle.Fill>
                                </Rectangle>
                                <Rectangle x:Name="WhiteGradient" Height="{Binding ActualHeight, ElementName=PART_ColorShadingCanvas}" Width="{Binding ActualWidth, ElementName=PART_ColorShadingCanvas}">
                                    <Rectangle.Fill>
                                        <LinearGradientBrush EndPoint="1,0" StartPoint="0,0">
                                            <GradientStop Color="White" Offset="0"/>
                                            <GradientStop Color="Transparent" Offset="1"/>
                                        </LinearGradientBrush>
                                    </Rectangle.Fill>
                                </Rectangle>
                                <Rectangle x:Name="BlackGradient" Height="{Binding ActualHeight, ElementName=PART_ColorShadingCanvas}" Width="{Binding ActualWidth, ElementName=PART_ColorShadingCanvas}">
                                    <Rectangle.Fill>
                                        <LinearGradientBrush EndPoint="0,0" StartPoint="0,1">
                                            <GradientStop Color="Black" Offset="0"/>
                                            <GradientStop Color="#00000000" Offset="1"/>
                                        </LinearGradientBrush>
                                    </Rectangle.Fill>
                                </Rectangle>
                                <Canvas x:Name="PART_ColorShadeSelector" Height="10" IsHitTestVisible="False" Width="10">
                                    <Ellipse Height="10" IsHitTestVisible="False" Stroke="White" StrokeThickness="3" Width="10"/>
                                    <Ellipse Height="10" IsHitTestVisible="False" Stroke="Black" StrokeThickness="1" Width="10"/>
                                </Canvas>
                            </Canvas>
                        </Border>
                        <picker:ColorSlider x:Name="PART_SpectrumSlider" VerticalAlignment="Stretch" Grid.Column="1" Margin="8,-8,0,0" />
                        <Grid Grid.Column="0" Grid.Row="1" Grid.ColumnSpan="2">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition/>
                                <ColumnDefinition/>
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition/>
                                <RowDefinition/>
                            </Grid.RowDefinitions>
                            <TextBlock Grid.Row="0" Grid.Column="0" Margin="0,4,4,4" Text="Selected color" />
                            <Border Grid.Column="0" Grid.Row="1" Height="48" HorizontalAlignment="Stretch" Margin="0,4,4,4" Background="{StaticResource TransparentBackgroundBrush}">
                                <Rectangle>
                                    <Rectangle.Fill>
                                        <SolidColorBrush Color="{Binding Path=SelectedColor, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                                    </Rectangle.Fill>
                                </Rectangle>
                            </Border>
                            <TextBlock Grid.Row="0" Grid.Column="1" Margin="4,4,0,4" Text="Initial color" />
                            <Border Grid.Column="1" Grid.Row="1" Height="48" HorizontalAlignment="Stretch" Margin="4,4,0,4" Background="{StaticResource TransparentBackgroundBrush}">
                                <Rectangle x:Name="PART_InitialColorRectangle">
                                    <Rectangle.Fill>
                                        <SolidColorBrush Color="{Binding Path=InitialColor, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                                    </Rectangle.Fill>
                                </Rectangle>
                            </Border>
                        </Grid>
                        <Grid Grid.Column="0" Grid.Row="2" Grid.ColumnSpan="2">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="auto"/>
                                <ColumnDefinition/>
                                <ColumnDefinition Width="auto"/>
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition/>
                                <RowDefinition/>
                                <RowDefinition/>
                                <RowDefinition/>
                            </Grid.RowDefinitions>
                            <TextBlock Grid.Column="0" Grid.Row="0" Margin="0,4,4,4" Text="R"/>
                            <TextBlock Grid.Column="0" Grid.Row="1" Margin="0,4,4,4" Text="G"/>
                            <TextBlock Grid.Column="0" Grid.Row="2" Margin="0,4,4,4" Text="B"/>
                            <TextBlock Grid.Column="0" Grid.Row="3" Margin="0,4,4,4" Text="A" Visibility="{Binding UseAlphaChannel, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={StaticResource BooleanToVisibilityConverter} }"/>

                            <Slider Grid.Column="1" Grid.Row="0" Margin="4" Minimum="0" Maximum="255" LargeChange="10" SmallChange="1" TickFrequency="1" VerticalAlignment="Center" Value="{Binding R, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                            <Slider Grid.Column="1" Grid.Row="1" Margin="4" Minimum="0" Maximum="255" LargeChange="10" SmallChange="1" TickFrequency="1" VerticalAlignment="Center" Value="{Binding G, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                            <Slider Grid.Column="1" Grid.Row="2" Margin="4" Minimum="0" Maximum="255" LargeChange="10" SmallChange="1" TickFrequency="1" VerticalAlignment="Center" Value="{Binding B, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                            <Slider Grid.Column="1" Grid.Row="3" Margin="4" Minimum="0" Maximum="255" LargeChange="10" SmallChange="1" TickFrequency="1" VerticalAlignment="Center" Value="{Binding A, RelativeSource={RelativeSource Mode=TemplatedParent}}" Visibility="{Binding UseAlphaChannel, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={StaticResource BooleanToVisibilityConverter} }"/>
                            
                            <TextBlock Grid.Column="2" Grid.Row="0" Margin="4,4,0,4" TextAlignment="Right" Text="{Binding R, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                            <TextBlock Grid.Column="2" Grid.Row="1" Margin="4,4,0,4" TextAlignment="Right" Text="{Binding G, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                            <TextBlock Grid.Column="2" Grid.Row="2" Margin="4,4,0,4" TextAlignment="Right" Text="{Binding B, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                            <TextBlock Grid.Column="2" Grid.Row="3" Margin="4,4,0,4" TextAlignment="Right" Text="{Binding A, RelativeSource={RelativeSource Mode=TemplatedParent}}" Visibility="{Binding UseAlphaChannel, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={StaticResource BooleanToVisibilityConverter} }"/>
                        </Grid>
                        <CheckBox Grid.Column="0" Grid.Row="3" Margin="0,4,0,4" Content="Use alpha channel" IsChecked="{Binding UseAlphaChannel, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                        <Grid Grid.Column="0" Grid.Row="4" Grid.ColumnSpan="2">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition/>
                                <ColumnDefinition Width="auto"/>
                                <ColumnDefinition/>
                                <ColumnDefinition Width="auto"/>
                            </Grid.ColumnDefinitions>
                            <TextBlock Grid.Column="0" Grid.Row="0" VerticalAlignment="Center" Margin="0,4,4,4" Text="{Binding HexString, RelativeSource={RelativeSource Mode=TemplatedParent}, Mode=OneWay}"/>
                            <Button x:Name="PART_CopyHexButton" Grid.Column="1" Grid.Row="0" Margin="4">
                                <Button.Content>
                                    <Path Stroke="{Binding ElementName=PART_CopyRGBButton, Path=Foreground}" StrokeThickness="1" Data="{StaticResource CopyGeometry}"/>
                                </Button.Content>
                            </Button>
                            <TextBlock Grid.Column="2" Grid.Row="0" VerticalAlignment="Center" Margin="4" Text="{Binding RGBString, RelativeSource={RelativeSource Mode=TemplatedParent}, Mode=OneWay}"/>
                            <Button x:Name="PART_CopyRGBButton" Grid.Column="3" Grid.Row="0" Margin="4,4,0,4">
                                <Button.Content>
                                    <Path Stroke="{Binding ElementName=PART_CopyRGBButton, Path=Foreground}" StrokeThickness="1" Data="{StaticResource CopyGeometry}"/>
                                </Button.Content>
                            </Button>
                        </Grid>
                        <TextBox x:Name="PART_HexadecimalTextBox" Visibility="Collapsed" Grid.Column="0" Grid.Row="3" Foreground="{TemplateBinding Foreground}" Margin="2,0" VerticalAlignment="Center">
                            <TextBox.Style>
                                <Style TargetType="{x:Type TextBox}">
                                    <Setter Property="Background" Value="Transparent"/>
                                    <Style.BasedOn>
                                        <Style TargetType="{x:Type TextBox}">
                                            <Style.BasedOn>
                                                <Style TargetType="{x:Type TextBoxBase}">
                                                    <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
                                                    <Setter Property="BorderBrush" Value="#FFABADB3"/>
                                                    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                                                    <Setter Property="BorderThickness" Value="1"/>
                                                    <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
                                                    <Setter Property="HorizontalContentAlignment" Value="Left"/>
                                                    <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
                                                    <Setter Property="AllowDrop" Value="True"/>
                                                    <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
                                                    <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
                                                    <Setter Property="Template">
                                                        <Setter.Value>
                                                            <ControlTemplate TargetType="{x:Type TextBoxBase}">
                                                                <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                                                                    <ScrollViewer x:Name="PART_ContentHost" Focusable="False" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
                                                                </Border>
                                                                <ControlTemplate.Triggers>
                                                                    <Trigger Property="IsEnabled" Value="False">
                                                                        <Setter Property="Opacity" TargetName="border" Value="0.56"/>
                                                                    </Trigger>
                                                                    <Trigger Property="IsMouseOver" Value="True">
                                                                        <Setter Property="BorderBrush" TargetName="border" Value="#FF7EB4EA"/>
                                                                    </Trigger>
                                                                    <Trigger Property="IsKeyboardFocused" Value="True">
                                                                        <Setter Property="BorderBrush" TargetName="border" Value="#FF569DE5"/>
                                                                    </Trigger>
                                                                </ControlTemplate.Triggers>
                                                            </ControlTemplate>
                                                        </Setter.Value>
                                                    </Setter>
                                                    <!--<Style.Triggers>
                                                        <DataTrigger Binding="{Binding 0}" Value="false">
                                                            <Setter Property="SelectionBrush" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                                                            <Setter Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
                                                        </DataTrigger>
                                                        <MultiTrigger>
                                                            <MultiTrigger.Conditions>
                                                                <Condition Property="IsInactiveSelectionHighlightEnabled" Value="True"/>
                                                                <Condition Property="IsSelectionActive" Value="False"/>
                                                            </MultiTrigger.Conditions>
                                                            <Setter Property="SelectionBrush" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}"/>
                                                            <Setter Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightTextBrushKey}}"/>
                                                        </MultiTrigger>
                                                    </Style.Triggers>-->
                                                </Style>
                                            </Style.BasedOn>
                                        </Style>
                                    </Style.BasedOn>
                                    <Style.Triggers>
                                        <Trigger Property="IsFocused" Value="False">
                                            <Setter Property="BorderBrush" Value="Transparent"/>
                                        </Trigger>
                                    </Style.Triggers>
                                </Style>
                            </TextBox.Style>
                        </TextBox>

                        
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                        <!--<Trigger Property="SelectedColor" Value="{x:Null}">
                            <Setter Property="Visibility" TargetName="PART_ColorShadeSelector" Value="Collapsed"/>
                            --><!--<Setter Property="Background" TargetName="SelectedColorBorder" Value="Transparent"/>-->
                            <!--<Setter Property="IsEnabled" TargetName="RGBBorder" Value="False"/>-->
                            <!--<Setter Property="TextElement.Foreground" TargetName="RGBBorder" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>--><!--
                        </Trigger>-->
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>
